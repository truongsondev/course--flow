// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int   @id @default(autoincrement())
  email     String   @unique
  password  String
  full_name String?
  role      Role
  bio       String?
  otp       String?
  otp_expiry  DateTime?
  otp_verified Boolean? @default(false)
  otp_attempts Int     @default(0)
  user_verified Boolean   @default(false)

  createdAt DateTime @default(now())

  courses        Course[]       @relation("InstructorCourses")
  enrollments    Enrollment[]
  reviews        Review[]
  courseProgress CourseProgress[]
  courseNotes    CourseNote[]
  sentMessages   ChatMessage[]  @relation("SentMessages")
  receivedMsgs   ChatMessage[]  @relation("ReceivedMessages")
  instructorMsgs InstructorMsg[] @relation("InstructorMsgs")
  studentMsgs    InstructorMsg[] @relation("StudentMsgs")

  @@map("users")
}

enum Role {
  student
  instructor
  admin
  guest
  reviewer

  @@map("roles")
}

model Category {
  id          Int  @id @default(autoincrement())
  name        String  @unique
  description String?

  courses Course[]



  @@map("categories")
}

model Course {
  id          Int   @id @default(autoincrement())
  title       String
  description String?
  instructor  User     @relation("InstructorCourses", fields: [instructorId], references: [id])
  instructorId Int
  thumbnailUrl   String
  videoUrl   String
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  enrollments    Enrollment[]
  reviews        Review[]
  lessons        Lesson[]
  // quizzes        Quiz[]
  courseProgress CourseProgress[]
  courseNotes    CourseNote[]

    

  @@map("courses")
}

model Enrollment {
  id         Int   @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  course     Course   @relation(fields: [courseId], references: [id])
  courseId   Int
  enrolledAt DateTime @default(now())

  @@map("enrollments")
}

model Review {
  id        Int   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("reviews")
}

model Lesson {
  id        Int   @id @default(autoincrement())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  title     String
  content   String?
  position  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courseProgress CourseProgress[]

  @@map("lessons")
}

// model Quiz {
//   id        Int   @id @default(autoincrement())
//   course    Course   @relation(fields: [courseId], references: [id])
//   courseId  Int
//   title     String
//   createdAt DateTime @default(now())

//   questions QuizQuestion[]
// }

// model QuizQuestion {
//   id        Int   @id @default(autoincrement())
//   quiz      Quiz     @relation(fields: [quizId], references: [id])
//   quizId    Int
//   question  String
//   position  Int
//   createdAt DateTime @default(now())

//   answers QuizAnswer[]
// }

// model QuizAnswer {
//   id        Int   @id @default(autoincrement())
//   question  QuizQuestion @relation(fields: [questionId], references: [id])
//   questionId Int
//   answer    String
//   isCorrect Boolean
//   createdAt DateTime @default(now())
// }

model CourseProgress {
  id                 Int   @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [id])
  userId             Int
  course             Course   @relation(fields: [courseId], references: [id])
  courseId           Int
  lastLesson         Lesson?  @relation(fields: [lastLessonId], references: [id])
  lastLessonId       Int?
  progressPercentage Decimal  @db.Decimal(5, 2) @default(0)
  updatedAt          DateTime @default(now())

  @@map("course_progress")
}

model CourseNote {
  id        Int   @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  Int
  note      String
  createdAt DateTime @default(now())

  @@map("course_notes")
}

model ChatMessage {
  id        Int   @id @default(autoincrement())
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId  Int
  receiver  User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  message   String
  sentAt    DateTime @default(now())

  @@map("chat_messages")
}

model InstructorMsg {
  id           Int   @id @default(autoincrement())
  instructor   User     @relation("InstructorMsgs", fields: [instructorId], references: [id])
  instructorId Int
  student      User     @relation("StudentMsgs", fields: [studentId], references: [id])
  studentId    Int
  message      String
  sentAt       DateTime @default(now())

  @@map("instructor_msgs")
}

